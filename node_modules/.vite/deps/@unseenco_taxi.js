import {
  __publicField
} from "./chunk-IVLCYF2H.js";

// node_modules/selector-set/selector-set.next.js
function SelectorSet() {
  if (!(this instanceof SelectorSet)) {
    return new SelectorSet();
  }
  this.size = 0;
  this.uid = 0;
  this.selectors = [];
  this.selectorObjects = {};
  this.indexes = Object.create(this.indexes);
  this.activeIndexes = [];
}
var docElem = window.document.documentElement;
var matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector;
SelectorSet.prototype.matchesSelector = function(el, selector) {
  return matches.call(el, selector);
};
SelectorSet.prototype.querySelectorAll = function(selectors, context) {
  return context.querySelectorAll(selectors);
};
SelectorSet.prototype.indexes = [];
var idRe = /^#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: "ID",
  selector: function matchIdSelector(sel) {
    var m;
    if (m = sel.match(idRe)) {
      return m[0].slice(1);
    }
  },
  element: function getElementId(el) {
    if (el.id) {
      return [el.id];
    }
  }
});
var classRe = /^\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: "CLASS",
  selector: function matchClassSelector(sel) {
    var m;
    if (m = sel.match(classRe)) {
      return m[0].slice(1);
    }
  },
  element: function getElementClassNames(el) {
    var className = el.className;
    if (className) {
      if (typeof className === "string") {
        return className.split(/\s/);
      } else if (typeof className === "object" && "baseVal" in className) {
        return className.baseVal.split(/\s/);
      }
    }
  }
});
var tagRe = /^((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: "TAG",
  selector: function matchTagSelector(sel) {
    var m;
    if (m = sel.match(tagRe)) {
      return m[0].toUpperCase();
    }
  },
  element: function getElementTagName(el) {
    return [el.nodeName.toUpperCase()];
  }
});
SelectorSet.prototype.indexes["default"] = {
  name: "UNIVERSAL",
  selector: function() {
    return true;
  },
  element: function() {
    return [true];
  }
};
var Map2;
if (typeof window.Map === "function") {
  Map2 = window.Map;
} else {
  Map2 = function() {
    function Map3() {
      this.map = {};
    }
    Map3.prototype.get = function(key) {
      return this.map[key + " "];
    };
    Map3.prototype.set = function(key, value) {
      this.map[key + " "] = value;
    };
    return Map3;
  }();
}
var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g;
function parseSelectorIndexes(allIndexes, selector) {
  allIndexes = allIndexes.slice(0).concat(allIndexes["default"]);
  var allIndexesLen = allIndexes.length, i, j, m, dup, rest = selector, key, index, indexes = [];
  do {
    chunker.exec("");
    if (m = chunker.exec(rest)) {
      rest = m[3];
      if (m[2] || !rest) {
        for (i = 0; i < allIndexesLen; i++) {
          index = allIndexes[i];
          if (key = index.selector(m[1])) {
            j = indexes.length;
            dup = false;
            while (j--) {
              if (indexes[j].index === index && indexes[j].key === key) {
                dup = true;
                break;
              }
            }
            if (!dup) {
              indexes.push({ index, key });
            }
            break;
          }
        }
      }
    }
  } while (m);
  return indexes;
}
function findByPrototype(ary, proto) {
  var i, len, item;
  for (i = 0, len = ary.length; i < len; i++) {
    item = ary[i];
    if (proto.isPrototypeOf(item)) {
      return item;
    }
  }
}
SelectorSet.prototype.logDefaultIndexUsed = function() {
};
SelectorSet.prototype.add = function(selector, data) {
  var obj, i, indexProto, key, index, objs, selectorIndexes, selectorIndex, indexes = this.activeIndexes, selectors = this.selectors, selectorObjects = this.selectorObjects;
  if (typeof selector !== "string") {
    return;
  }
  obj = {
    id: this.uid++,
    selector,
    data
  };
  selectorObjects[obj.id] = obj;
  selectorIndexes = parseSelectorIndexes(this.indexes, selector);
  for (i = 0; i < selectorIndexes.length; i++) {
    selectorIndex = selectorIndexes[i];
    key = selectorIndex.key;
    indexProto = selectorIndex.index;
    index = findByPrototype(indexes, indexProto);
    if (!index) {
      index = Object.create(indexProto);
      index.map = new Map2();
      indexes.push(index);
    }
    if (indexProto === this.indexes["default"]) {
      this.logDefaultIndexUsed(obj);
    }
    objs = index.map.get(key);
    if (!objs) {
      objs = [];
      index.map.set(key, objs);
    }
    objs.push(obj);
  }
  this.size++;
  selectors.push(selector);
};
SelectorSet.prototype.remove = function(selector, data) {
  if (typeof selector !== "string") {
    return;
  }
  var selectorIndexes, selectorIndex, i, j, k, selIndex, objs, obj, indexes = this.activeIndexes, selectors = this.selectors = [], selectorObjects = this.selectorObjects, removedIds = {}, removeAll = arguments.length === 1;
  selectorIndexes = parseSelectorIndexes(this.indexes, selector);
  for (i = 0; i < selectorIndexes.length; i++) {
    selectorIndex = selectorIndexes[i];
    j = indexes.length;
    while (j--) {
      selIndex = indexes[j];
      if (selectorIndex.index.isPrototypeOf(selIndex)) {
        objs = selIndex.map.get(selectorIndex.key);
        if (objs) {
          k = objs.length;
          while (k--) {
            obj = objs[k];
            if (obj.selector === selector && (removeAll || obj.data === data)) {
              objs.splice(k, 1);
              removedIds[obj.id] = true;
            }
          }
        }
        break;
      }
    }
  }
  for (i in removedIds) {
    delete selectorObjects[i];
    this.size--;
  }
  for (i in selectorObjects) {
    selectors.push(selectorObjects[i].selector);
  }
};
function sortById(a, b) {
  return a.id - b.id;
}
SelectorSet.prototype.queryAll = function(context) {
  if (!this.selectors.length) {
    return [];
  }
  var matches2 = {}, results = [];
  var els = this.querySelectorAll(this.selectors.join(", "), context);
  var i, j, len, len2, el, m, match, obj;
  for (i = 0, len = els.length; i < len; i++) {
    el = els[i];
    m = this.matches(el);
    for (j = 0, len2 = m.length; j < len2; j++) {
      obj = m[j];
      if (!matches2[obj.id]) {
        match = {
          id: obj.id,
          selector: obj.selector,
          data: obj.data,
          elements: []
        };
        matches2[obj.id] = match;
        results.push(match);
      } else {
        match = matches2[obj.id];
      }
      match.elements.push(el);
    }
  }
  return results.sort(sortById);
};
SelectorSet.prototype.matches = function(el) {
  if (!el) {
    return [];
  }
  var i, j, k, len, len2, len3, index, keys, objs, obj, id;
  var indexes = this.activeIndexes, matchedIds = {}, matches2 = [];
  for (i = 0, len = indexes.length; i < len; i++) {
    index = indexes[i];
    keys = index.element(el);
    if (keys) {
      for (j = 0, len2 = keys.length; j < len2; j++) {
        if (objs = index.map.get(keys[j])) {
          for (k = 0, len3 = objs.length; k < len3; k++) {
            obj = objs[k];
            id = obj.id;
            if (!matchedIds[id] && this.matchesSelector(el, obj.selector)) {
              matchedIds[id] = true;
              matches2.push(obj);
            }
          }
        }
      }
    }
  }
  return matches2.sort(sortById);
};

// node_modules/@unseenco/e/src/utils.js
var eventTypes = {};
var listeners = {};
var nonBubblers = ["mouseenter", "mouseleave", "pointerenter", "pointerleave", "blur", "focus"];
function makeBusStack(event) {
  if (listeners[event] === void 0) {
    listeners[event] = /* @__PURE__ */ new Set();
  }
}
function triggerBus(event, args) {
  if (listeners[event]) {
    listeners[event].forEach((cb) => {
      cb(...args);
    });
  }
}
function maybeRunQuerySelector(el) {
  return typeof el === "string" ? document.querySelectorAll(el) : el;
}
function handleDelegation(e) {
  let matches2 = traverse(eventTypes[e.type], e.target);
  if (matches2.length) {
    for (let i = 0; i < matches2.length; i++) {
      for (let i2 = 0; i2 < matches2[i].stack.length; i2++) {
        if (nonBubblers.indexOf(e.type) !== -1) {
          addDelegateTarget(e, matches2[i].delegatedTarget);
          if (e.target === matches2[i].delegatedTarget) {
            matches2[i].stack[i2].data(e);
          }
        } else {
          addDelegateTarget(e, matches2[i].delegatedTarget);
          matches2[i].stack[i2].data(e);
        }
      }
    }
  }
}
function traverse(listeners2, target) {
  const queue = [];
  let node = target;
  do {
    if (node.nodeType !== 1) {
      break;
    }
    const matches2 = listeners2.matches(node);
    if (matches2.length) {
      queue.push({ delegatedTarget: node, stack: matches2 });
    }
  } while (node = node.parentElement);
  return queue;
}
function addDelegateTarget(event, delegatedTarget) {
  Object.defineProperty(event, "currentTarget", {
    configurable: true,
    enumerable: true,
    get: () => delegatedTarget
  });
}
function clone(object) {
  const copy = {};
  for (const key in object) {
    copy[key] = [...object[key]];
  }
  return copy;
}

// node_modules/@unseenco/e/src/e.js
var E = class {
  bindAll(context, methods) {
    if (!methods) {
      methods = Object.getOwnPropertyNames(Object.getPrototypeOf(context));
    }
    for (let i = 0; i < methods.length; i++) {
      context[methods[i]] = context[methods[i]].bind(context);
    }
  }
  on(event, el, callback, options) {
    const events = event.split(" ");
    for (let i = 0; i < events.length; i++) {
      if (typeof el === "function" && callback === void 0) {
        makeBusStack(events[i]);
        listeners[events[i]].add(el);
        continue;
      }
      if (el.nodeType && el.nodeType === 1 || el === window || el === document) {
        el.addEventListener(events[i], callback, options);
        continue;
      }
      el = maybeRunQuerySelector(el);
      for (let n = 0; n < el.length; n++) {
        el[n].addEventListener(events[i], callback, options);
      }
    }
  }
  delegate(event, delegate, callback) {
    const events = event.split(" ");
    for (let i = 0; i < events.length; i++) {
      let map = eventTypes[events[i]];
      if (map === void 0) {
        map = new SelectorSet();
        eventTypes[events[i]] = map;
        if (nonBubblers.indexOf(events[i]) !== -1) {
          document.addEventListener(events[i], handleDelegation, true);
        } else {
          document.addEventListener(events[i], handleDelegation);
        }
      }
      map.add(delegate, callback);
    }
  }
  off(event, el, callback, options) {
    var _a;
    const events = event.split(" ");
    for (let i = 0; i < events.length; i++) {
      if (el === void 0) {
        (_a = listeners[events[i]]) == null ? void 0 : _a.clear();
        continue;
      }
      if (typeof el === "function") {
        makeBusStack(events[i]);
        listeners[events[i]].delete(el);
        continue;
      }
      const map = eventTypes[events[i]];
      if (map !== void 0) {
        map.remove(el, callback);
        if (map.size === 0) {
          delete eventTypes[events[i]];
          if (nonBubblers.indexOf(events[i]) !== -1) {
            document.removeEventListener(events[i], handleDelegation, true);
          } else {
            document.removeEventListener(events[i], handleDelegation);
          }
          continue;
        }
      }
      if (el.removeEventListener !== void 0) {
        el.removeEventListener(events[i], callback, options);
        continue;
      }
      el = maybeRunQuerySelector(el);
      for (let n = 0; n < el.length; n++) {
        el[n].removeEventListener(events[i], callback, options);
      }
    }
  }
  emit(event, ...args) {
    triggerBus(event, args);
  }
  debugDelegated() {
    return JSON.parse(JSON.stringify(eventTypes));
  }
  debugBus() {
    return clone(listeners);
  }
  hasBus(event) {
    return this.debugBus().hasOwnProperty(event);
  }
};
var instance = new E();
var e_default = instance;

// node_modules/@unseenco/taxi/src/helpers.js
var parser = new DOMParser();
function parseDom(html) {
  return typeof html === "string" ? parser.parseFromString(html, "text/html") : html;
}
function processUrl(url) {
  const details = new URL(url, window.location.origin);
  let normalized = null;
  if (details.hash.length) {
    normalized = url.replace(details.hash, "");
  }
  return {
    hasHash: details.hash.length > 0,
    pathname: details.pathname,
    host: details.host,
    raw: url,
    href: normalized || details.href
  };
}
function reloadScript(node) {
  node.parentNode.replaceChild(duplicateScript(node), node);
}
function appendScript(node) {
  if (node.parentNode.tagName === "HEAD") {
    document.head.appendChild(duplicateScript(node));
  } else {
    document.body.appendChild(duplicateScript(node));
  }
}
function duplicateScript(node) {
  const replacement = document.createElement("SCRIPT");
  for (let k = 0; k < node.attributes.length; k++) {
    const attr = node.attributes[k];
    replacement.setAttribute(attr.nodeName, attr.nodeValue);
  }
  if (node.innerHTML) {
    replacement.innerHTML = node.innerHTML;
  }
  return replacement;
}

// node_modules/@unseenco/taxi/src/Transition.js
var Transition = class {
  constructor({ wrapper }) {
    this.wrapper = wrapper;
  }
  leave(props) {
    return new Promise((resolve) => {
      this.onLeave({ ...props, done: resolve });
    });
  }
  enter(props) {
    return new Promise((resolve) => {
      this.onEnter({ ...props, done: resolve });
    });
  }
  onLeave({ from, trigger, done }) {
    done();
  }
  onEnter({ to, trigger, done }) {
    done();
  }
};

// node_modules/@unseenco/taxi/src/Renderer.js
var Renderer = class {
  constructor({ content, page, title, wrapper }) {
    this._contentString = content.outerHTML;
    this._DOM = null;
    this.page = page;
    this.title = title;
    this.wrapper = wrapper;
    this.content = this.wrapper.lastElementChild;
  }
  onEnter() {
  }
  onEnterCompleted() {
  }
  onLeave() {
  }
  onLeaveCompleted() {
  }
  initialLoad() {
    this.onEnter();
    this.onEnterCompleted();
  }
  update() {
    document.title = this.title;
    this.wrapper.appendChild(this._DOM.firstElementChild);
    this.content = this.wrapper.lastElementChild;
    this._DOM = null;
  }
  createDom() {
    if (!this._DOM) {
      this._DOM = document.createElement("div");
      this._DOM.innerHTML = this._contentString;
    }
  }
  remove() {
    this.wrapper.firstElementChild.remove();
  }
  enter(transition, trigger) {
    return new Promise((resolve) => {
      this.onEnter();
      transition.enter({ trigger, to: this.content }).then(() => {
        this.onEnterCompleted();
        resolve();
      });
    });
  }
  leave(transition, trigger, removeOldContent) {
    return new Promise((resolve) => {
      this.onLeave();
      transition.leave({ trigger, from: this.content }).then(() => {
        if (removeOldContent) {
          this.remove();
        }
        this.onLeaveCompleted();
        resolve();
      });
    });
  }
};

// node_modules/@unseenco/taxi/src/RouteStore.js
var RouteStore = class {
  constructor() {
    __publicField(this, "data", /* @__PURE__ */ new Map());
    __publicField(this, "regexCache", /* @__PURE__ */ new Map());
  }
  add(fromPattern, toPattern, transition) {
    if (!this.data.has(fromPattern)) {
      this.data.set(fromPattern, /* @__PURE__ */ new Map());
      this.regexCache.set(fromPattern, new RegExp(`^${fromPattern}$`));
    }
    this.data.get(fromPattern).set(toPattern, transition);
    this.regexCache.set(toPattern, new RegExp(`^${toPattern}$`));
  }
  findMatch(currentUrl, nextUrl) {
    for (const [fromPattern, potentialMatches] of this.data) {
      if (currentUrl.pathname.match(this.regexCache.get(fromPattern))) {
        for (const [toPattern, transition] of potentialMatches) {
          if (nextUrl.pathname.match(this.regexCache.get(toPattern))) {
            return transition;
          }
        }
        break;
      }
    }
    return null;
  }
};

// node_modules/@unseenco/taxi/src/Core.js
var IN_PROGRESS = "A transition is currently in progress";
var Core = class {
  constructor(parameters = {}) {
    __publicField(this, "isTransitioning", false);
    __publicField(this, "currentCacheEntry", null);
    __publicField(this, "cache", /* @__PURE__ */ new Map());
    __publicField(this, "activePromises", /* @__PURE__ */ new Map());
    __publicField(this, "onClick", (e) => {
      if (!(e.metaKey || e.ctrlKey)) {
        const target = processUrl(e.currentTarget.href);
        this.currentLocation = processUrl(window.location.href);
        if (this.currentLocation.host !== target.host) {
          return;
        }
        if (this.currentLocation.href !== target.href || this.currentLocation.hasHash && !target.hasHash) {
          e.preventDefault();
          this.navigateTo(target.raw, e.currentTarget.dataset.transition || false, e.currentTarget).catch((err) => console.warn(err));
          return;
        }
        if (!this.currentLocation.hasHash && !target.hasHash) {
          e.preventDefault();
        }
      }
    });
    __publicField(this, "onPopstate", () => {
      if (window.location.pathname === this.currentLocation.pathname && !this.isPopping) {
        return false;
      }
      if (!this.allowInterruption && (this.isTransitioning || this.isPopping)) {
        window.history.pushState({}, "", this.popTarget);
        console.warn(IN_PROGRESS);
        return false;
      }
      if (!this.isPopping) {
        this.popTarget = window.location.href;
      }
      this.isPopping = true;
      this.navigateTo(window.location.href, false, "popstate");
    });
    __publicField(this, "onPrefetch", (e) => {
      const target = processUrl(e.currentTarget.href);
      if (this.currentLocation.host !== target.host) {
        return;
      }
      this.preload(e.currentTarget.href, false);
    });
    const {
      links = "a:not([target]):not([href^=\\#]):not([data-taxi-ignore])",
      removeOldContent = true,
      allowInterruption = false,
      bypassCache = false,
      enablePrefetch = true,
      renderers = {
        default: Renderer
      },
      transitions = {
        default: Transition
      },
      reloadJsFilter = (element) => element.dataset.taxiReload !== void 0,
      reloadCssFilter = (element) => true
    } = parameters;
    this.renderers = renderers;
    this.transitions = transitions;
    this.defaultRenderer = this.renderers.default || Renderer;
    this.defaultTransition = this.transitions.default || Transition;
    this.wrapper = document.querySelector("[data-taxi]");
    this.reloadJsFilter = reloadJsFilter;
    this.reloadCssFilter = reloadCssFilter;
    this.removeOldContent = removeOldContent;
    this.allowInterruption = allowInterruption;
    this.bypassCache = bypassCache;
    this.enablePrefetch = enablePrefetch;
    this.cache = /* @__PURE__ */ new Map();
    this.isPopping = false;
    this.attachEvents(links);
    this.currentLocation = processUrl(window.location.href);
    this.cache.set(this.currentLocation.href, this.createCacheEntry(document.cloneNode(true), window.location.href));
    this.currentCacheEntry = this.cache.get(this.currentLocation.href);
    this.currentCacheEntry.renderer.initialLoad();
  }
  setDefaultRenderer(renderer) {
    this.defaultRenderer = this.renderers[renderer];
  }
  setDefaultTransition(transition) {
    this.defaultTransition = this.transitions[transition];
  }
  addRoute(fromPattern, toPattern, transition) {
    if (!this.router) {
      this.router = new RouteStore();
    }
    this.router.add(fromPattern, toPattern, transition);
  }
  preload(url, preloadAssets = false) {
    url = processUrl(url).href;
    if (!this.cache.has(url)) {
      return this.fetch(url, false).then(async (response) => {
        this.cache.set(url, this.createCacheEntry(response.html, response.url));
        if (preloadAssets) {
          this.cache.get(url).renderer.createDom();
        }
      });
    }
    return Promise.resolve();
  }
  updateCache(url) {
    const key = processUrl(url || window.location.href).href;
    if (this.cache.has(key)) {
      this.cache.delete(key);
    }
    this.cache.set(key, this.createCacheEntry(document.cloneNode(true), key));
  }
  clearCache(url) {
    const key = processUrl(url || window.location.href).href;
    if (this.cache.has(key)) {
      this.cache.delete(key);
    }
  }
  navigateTo(url, transition = false, trigger = false) {
    return new Promise((resolve, reject) => {
      if (!this.allowInterruption && this.isTransitioning) {
        reject(new Error(IN_PROGRESS));
        return;
      }
      this.isTransitioning = true;
      this.isPopping = true;
      this.targetLocation = processUrl(url);
      this.popTarget = window.location.href;
      const TransitionClass = new (this.chooseTransition(transition))({ wrapper: this.wrapper });
      let navigationPromise;
      if (this.bypassCache || !this.cache.has(this.targetLocation.href) || this.cache.get(this.targetLocation.href).skipCache) {
        const fetched = this.fetch(this.targetLocation.href).then((response) => {
          this.cache.set(this.targetLocation.href, this.createCacheEntry(response.html, response.url));
          this.cache.get(this.targetLocation.href).renderer.createDom();
        });
        navigationPromise = this.beforeFetch(this.targetLocation, TransitionClass, trigger).then(async () => {
          return fetched.then(async () => {
            return await this.afterFetch(this.targetLocation, TransitionClass, this.cache.get(this.targetLocation.href), trigger);
          });
        });
      } else {
        this.cache.get(this.targetLocation.href).renderer.createDom();
        navigationPromise = this.beforeFetch(this.targetLocation, TransitionClass, trigger).then(async () => {
          return await this.afterFetch(this.targetLocation, TransitionClass, this.cache.get(this.targetLocation.href), trigger);
        });
      }
      navigationPromise.then(() => {
        resolve();
      });
    });
  }
  on(event, callback) {
    e_default.on(event, callback);
  }
  off(event, callback) {
    e_default.off(event, callback);
  }
  beforeFetch(url, TransitionClass, trigger) {
    e_default.emit("NAVIGATE_OUT", {
      from: this.currentCacheEntry,
      trigger
    });
    return new Promise((resolve) => {
      this.currentCacheEntry.renderer.leave(TransitionClass, trigger, this.removeOldContent).then(() => {
        if (trigger !== "popstate") {
          window.history.pushState({}, "", url.raw);
        }
        resolve();
      });
    });
  }
  afterFetch(url, TransitionClass, entry, trigger) {
    this.currentLocation = url;
    this.popTarget = this.currentLocation.href;
    return new Promise((resolve) => {
      entry.renderer.update();
      e_default.emit("NAVIGATE_IN", {
        from: this.currentCacheEntry,
        to: entry,
        trigger
      });
      if (this.reloadJsFilter) {
        this.loadScripts(entry.scripts);
      }
      if (this.reloadCssFilter) {
        this.loadStyles(entry.styles);
      }
      if (trigger !== "popstate" && url.href !== entry.finalUrl) {
        window.history.replaceState({}, "", entry.finalUrl);
      }
      entry.renderer.enter(TransitionClass, trigger).then(() => {
        e_default.emit("NAVIGATE_END", {
          from: this.currentCacheEntry,
          to: entry,
          trigger
        });
        this.currentCacheEntry = entry;
        this.isTransitioning = false;
        this.isPopping = false;
        resolve();
      });
    });
  }
  loadScripts(cachedScripts) {
    const newScripts = [...cachedScripts];
    const currentScripts = Array.from(document.querySelectorAll("script")).filter(this.reloadJsFilter);
    for (let i = 0; i < currentScripts.length; i++) {
      for (let n = 0; n < newScripts.length; n++) {
        if (currentScripts[i].outerHTML === newScripts[n].outerHTML) {
          reloadScript(currentScripts[i]);
          newScripts.splice(n, 1);
          break;
        }
      }
    }
    for (const script of newScripts) {
      appendScript(script);
    }
  }
  loadStyles(cachedStyles) {
    const currentStyles = Array.from(document.querySelectorAll('link[rel="stylesheet"]')).filter(this.reloadCssFilter);
    cachedStyles.forEach((el) => {
      if (el.href && !currentStyles.find((link) => link.href === el.href)) {
        document.body.append(el);
      }
    });
  }
  attachEvents(links) {
    e_default.delegate("click", links, this.onClick);
    e_default.on("popstate", window, this.onPopstate);
    if (this.enablePrefetch) {
      e_default.delegate("mouseenter focus", links, this.onPrefetch);
    }
  }
  fetch(url, runFallback = true) {
    if (this.activePromises.has(url)) {
      return this.activePromises.get(url);
    }
    const request = new Promise((resolve, reject) => {
      let resolvedUrl;
      fetch(url, {
        mode: "same-origin",
        method: "GET",
        headers: { "X-Requested-With": "Taxi" },
        credentials: "same-origin"
      }).then((response) => {
        if (!response.ok) {
          reject("Taxi encountered a non 2xx HTTP status code");
          if (runFallback) {
            window.location.href = url;
          }
        }
        resolvedUrl = response.url;
        return response.text();
      }).then((htmlString) => {
        resolve({ html: parseDom(htmlString), url: resolvedUrl });
      }).catch((err) => {
        reject(err);
        if (runFallback) {
          window.location.href = url;
        }
      }).finally(() => {
        this.activePromises.delete(url);
      });
    });
    this.activePromises.set(url, request);
    return request;
  }
  chooseTransition(transition) {
    var _a;
    if (transition) {
      return this.transitions[transition];
    }
    const routeTransition = (_a = this.router) == null ? void 0 : _a.findMatch(this.currentLocation, this.targetLocation);
    if (routeTransition) {
      return this.transitions[routeTransition];
    }
    return this.defaultTransition;
  }
  createCacheEntry(page, url) {
    const content = page.querySelector("[data-taxi-view]");
    const Renderer2 = content.dataset.taxiView.length ? this.renderers[content.dataset.taxiView] : this.defaultRenderer;
    if (!Renderer2) {
      console.warn(`The Renderer "${content.dataset.taxiView}" was set in the data-taxi-view of the requested page, but not registered in Taxi.`);
    }
    return {
      page,
      content,
      finalUrl: url,
      skipCache: content.hasAttribute("data-taxi-nocache"),
      scripts: this.reloadJsFilter ? Array.from(page.querySelectorAll("script")).filter(this.reloadJsFilter) : [],
      styles: this.reloadCssFilter ? Array.from(page.querySelectorAll('link[rel="stylesheet"]')).filter(this.reloadCssFilter) : [],
      title: page.title,
      renderer: new Renderer2({
        wrapper: this.wrapper,
        title: page.title,
        content,
        page
      })
    };
  }
};
export {
  Core,
  Renderer,
  Transition
};
//# sourceMappingURL=@unseenco_taxi.js.map
